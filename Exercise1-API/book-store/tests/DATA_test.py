"""
File: DATA_test.py
Description: This script contains a test case for different operations in bookstore_api. 
             It includes a comprehensive test scenario with different steps such as creating, retrieving, updating, and deleting the book.
             Test data is generated RANDOMLY to ensure a variety of inputs.
             The random books are generated by random_book, using OPEN LIBRARY API
Author: Roger PÃ©rez Parera
Date: 20th September, 2023
"""
from test_utils import constants, utils, random_book
import pytest
from CREATE_test import create_books_and_validate
from READ_test import create_and_retrieve_single_book_and_validate
from UPDATE_test import update_book_and_validate
from DELETE_test import delete_books_and_validate

# ===========================
# ======== TEST DATA ========
# ===========================
# Generate random input data for 20 books
input_data = [random_book.provide_random_book_data() for _ in range(20)]

# ===========================
# ======= TEST CASES ========
# ===========================
# Parameterized test case function that runs with random input data
@pytest.mark.parametrize("input_book", input_data)
def test_create_1_book_with_valid_data(input_book):
    utils.preprocessing()

    book_list = [input_book]
    expected_list = [input_book]

    # Create, retrieve, update, delete, and validate book operations
    create_books_and_validate(book_list, expected_list, 201) # Create operation using the random book data
    create_and_retrieve_single_book_and_validate([], "1", input_book, 200) # Retrieve this single book and validate
    update_book_and_validate("1", constants.book_up_to_date, constants.book_up_to_date, 200) # Update this single book and validate
    create_and_retrieve_single_book_and_validate([], "1", constants.book_up_to_date, 200) # Retrieve this single updated book and validate
    delete_books_and_validate("1", constants.succesful_deletion, 204) # Delete this single book and validate
    create_and_retrieve_single_book_and_validate([], "1", constants.error_book_not_found, 404) # Retrieve this single book and expect book_not_found

    utils.postprocessing()